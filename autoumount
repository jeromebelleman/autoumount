#! /usr/bin/env python

'''
Automatically umount filesystems after a period of inactivity
'''

import sys
import os
import signal
import argparse
from argparse import ArgumentDefaultsHelpFormatter
import subprocess
import logging
import select
import daemon
import pyinotify
import psutil


class EventHandler(pyinotify.ProcessEvent):
    '''
    Reset timer on filesystem activity
    '''

    def __init__(self, timeout):
        '''
        Set timeout
        '''

        super(EventHandler, self).__init__()
        self.timeout = timeout

    def process_IN_ACCESS(self, _): # pylint: disable=invalid-name
        '''
        Reset timer on accesses
        '''

        logging.debug("Access notified, resetting timeout")
        signal.alarm(self.timeout)

    def process_IN_MOVED_FROM(self, _): # pylint: disable=invalid-name
        '''
        Reset timer on move
        '''

        logging.debug("Move notified, resetting timeout")
        signal.alarm(self.timeout)

    def process_IN_MODIFY(self, _): # pylint: disable=invalid-name
        '''
        Reset timer on modification
        '''

        logging.debug("Modification notified, resetting timeout")
        signal.alarm(self.timeout)

    def process_IN_DELETE(self, _): # pylint: disable=invalid-name
        '''
        Reset timer on deletion
        '''

        logging.debug("Deletion notified, resetting timeout")
        signal.alarm(self.timeout)

    def process_IN_ATTRIB(self, _): # pylint: disable=invalid-name
        '''
        Reset timer on attribute changes
        '''

        logging.debug("Attribute change notified, resetting timeout")
        signal.alarm(self.timeout)


def waitmount(mtab, mountpoint):
    '''
    Wait for mount
    '''

    logging.debug("Waiting for %s to be mounted", mountpoint)
    with open(mtab) as fhl:
        while True:
            # https://stackoverflow.com/questions/5070801
            select.select([], [], [fhl])
            for line in fhl:
                if mountpoint == line.split()[1]:
                    logging.info("%s has been mounted", mountpoint)
                    return


def killall(mountpoint, cmdline):
    '''
    Kill all processes keeping a filesystem busy
    '''

    for proc in psutil.process_iter():
        try:
            if proc.cwd().startswith(mountpoint):
                logging.debug("Killing %s", ' '.join(proc.cmdline()))
                proc.kill()
                continue
            for fle in proc.open_files():
                if fle[0].startswith(mountpoint):
                    logging.debug("Killing %s", ' '.join(proc.cmdline()))
                    proc.kill()
                    continue
            if cmdline:
                for word in proc.cmdline():
                    if word.startswith(mountpoint):
                        logging.debug("Killing %s", ' '.join(proc.cmdline()))
                        proc.kill()
                        continue
        except psutil.AccessDenied:
            pass


def addwatches(manager, notifier, mountpoint, timeout):
    '''
    Add watches
    '''

    logging.debug("Adding watch on %s", mountpoint)
    # Not all events cause attribute changes
    manager.add_watch(mountpoint,
                      pyinotify.IN_ACCESS | \
                      pyinotify.IN_ATTRIB | \
                      pyinotify.IN_DELETE | \
                      pyinotify.IN_MODIFY | \
                      pyinotify.IN_MOVED_FROM,
                      rec=True)

    logging.debug("Setting up %ds timeout", timeout)
    signal.alarm(timeout)

    logging.debug("Starting notifier loop")
    notifier.loop()


def run(mountpoint, timeout, command, cmdline, mtab, foreground, debug):
    '''
    Run logic
    '''

    # Set up logging
    try:
        logfile = '/var/log/%s.log' % os.path.basename(__file__)
        logging.basicConfig(level=logging.DEBUG if debug else logging.INFO,
                            format='%(asctime)s %(levelname)s %(message)s',
                            datefmt='%Y-%m-%d %H:%M',
                            filename=None if foreground else logfile)
    except IOError, exc:
        print >> sys.stderr, exc
        return 1

    # Set up inotify
    logging.debug("Setting up inotify")
    manager = pyinotify.WatchManager()
    handler = EventHandler(timeout)
    notifier = pyinotify.Notifier(manager, handler)

    # Set up alarming
    def umount(signum, frame): # pylint: disable=unused-argument
        '''
        Unmount after killing processes if needs be
        '''

        # Kill processes
        killall(mountpoint, cmdline)

        # Unmount filesystem
        logging.info("Running %s %s", command, mountpoint)
        subprocess.call('%s %s' % (command, mountpoint), shell=True)

        # Wait for mount and add watches again
        waitmount(mtab, mountpoint)
        addwatches(manager, notifier, mountpoint, timeout)

    signal.signal(signal.SIGALRM, umount)

    if os.path.ismount(mountpoint):
        addwatches(manager, notifier, mountpoint, timeout)
    else:
        waitmount(mtab, mountpoint)
        addwatches(manager, notifier, mountpoint, timeout)


def main():
    '''
    Main loop
    '''

    # Parse arguments
    psr = argparse.ArgumentParser(description=__doc__,
                                  formatter_class=ArgumentDefaultsHelpFormatter)
    psr.add_argument('mountpoint', help="mount point")
    psr.add_argument('timeout', type=int, help="seconds after which to unmount")
    psr.add_argument('command', help="unmount command")
    psr.add_argument('--cmdline', action='store_true',
                     help="kill processes with mountpoint in command line")
    psr.add_argument('--mtab', default='/etc/mtab', help="mtab file")
    psr.add_argument('--debug', action='store_true',
                     help="print debug information")
    psr.add_argument('--foreground', action='store_true',
                     help="don't daemonise and print logs to stdout")
    args = psr.parse_args()

    # Run
    if args.foreground:
        run(args.mountpoint, args.timeout, args.command,
            args.cmdline, args.mtab, args.foreground, args.debug)
    else:
        with daemon.DaemonContext():
            run(args.mountpoint, args.timeout, args.command,
                args.cmdline, args.mtab, args.foreground, args.debug)


if __name__ == '__main__':
    sys.exit(main())
